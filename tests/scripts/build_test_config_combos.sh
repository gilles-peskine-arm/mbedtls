#!/usr/bin/env bash

# Test that the given .o file builds with all (valid) combinations of the given options.
#
# Syntax: build_test_config_combos FILE VALIDATOR_FUNCTION OPT1 OPT2 ...
#
# The validator function is the name of a function to validate the combination of options.
# It may be "" if all combinations are valid.
# It receives a string containing a combination of options, as passed to the compiler,
# e.g. "-DOPT1 -DOPT2 ...". It must echo something iff the combination is invalid.

validate_aes_config_variations() {
    if [[ "$1" == *"MBEDTLS_AES_USE_HARDWARE_ONLY"* ]]; then
        if [[ "$1" == *"MBEDTLS_PADLOCK_C"* ]]; then
            echo INVALID
        fi
        if [[ !(("$HOSTTYPE" == "aarch64" && "$1" != *"MBEDTLS_AESCE_C"*) || \
                ("$HOSTTYPE" == "x86_64"  && "$1" != *"MBEDTLS_AESNI_C"*)) ]]; then
            echo INVALID
        fi
    fi
}

file=$1
shift
validate_options=$1
shift
options=("$@")

# clear all of the options so that they can be overridden on the clang commandline
for opt in "${options[@]}"; do
    ./scripts/config.py unset ${opt}
done

# enter the directory containing the target file & strip the dir from the filename
cd $(dirname ${file})
file=$(basename ${file})

# The most common issue is unused variables/functions, so ensure -Wunused is set.
warning_flags="-Werror -Wall -Wextra -Wwrite-strings -Wpointer-arith -Wimplicit-fallthrough -Wshadow -Wvla -Wformat=2 -Wno-format-nonliteral -Wshadow -Wasm-operand-widths -Wunused"

# Extract the command generated by the Makefile to build the target file.
# This ensures that we have any include paths, macro definitions, etc
# that may be applied by make.
# Add -fsyntax-only as we only want a syntax check and don't need to generate a file.
compile_cmd="clang \$(LOCAL_CFLAGS) ${warning_flags} -fsyntax-only -c"

makefile=$(TMPDIR=. mktemp)
deps=""

len=${#options[@]}
source_file=${file%.o}.c

targets=0
echo 'include Makefile' >${makefile}
for ((i = 0; i < $((2**${len})); i++)); do
    # generate each of 2^n combinations of options
    # each bit of $i is used to determine if options[i] will be set or not
    target="t"
    clang_args=""
    for ((j = 0; j < ${len}; j++)); do
        if (((i >> j) & 1)); then
            opt=-D${options[$j]}
            clang_args="${clang_args} ${opt}"
            target="${target}${opt}"
        fi
    done

    # if combination is not known to be invalid, add it to the makefile
    if [[ -z $validate_options ]] || [[ $($validate_options "${clang_args}") == "" ]] ; then
        cmd="${compile_cmd} ${clang_args}"
        echo "${target}: ${source_file}; $cmd ${source_file}" >> ${makefile}

        deps="${deps} ${target}"
        ((++targets))
    fi
done

echo "build_test_config_combos: ${deps}" >> ${makefile}

# execute all of the commands via Make (probably in parallel)
make -s -f ${makefile} build_test_config_combos
echo "$targets targets checked"

# clean up the temporary makefile
rm ${makefile}
